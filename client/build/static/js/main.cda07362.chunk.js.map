{"version":3,"sources":["Todo.js","TodoList.js","InputLine.js","TodoApp.js","serviceWorker.js","index.js"],"names":["Todo","_this","this","react","onClick","props","xClick","task","_id","toggleClick","style","textDecoration","completed","React","TodoList","todos","map","item","index","src_Todo","key","todoToggleClick","todoXClick","InputLine","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","typedText","handleKey","bind","assertThisInitialized","event","setState","target","value","onSubmit","e","handleSubmit","_this2","type","onKeyPress","onChange","handleTyping","apiUrl","TodoApp","addTodo","removeTodo","toggleTodo","newTask","taskText","axios","post","then","response","concat","data","catch","error","console","log","id","_this3","i","length","splice","_this4","$","each","_this5","get","src_InputLine","onKey","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_TodoApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cda07362.chunk.js","sourcesContent":["import * as React from \"react\";\n\nclass Todo extends React.Component {\n\n\n  render() {\n    return (\n    <li>\n      <button onClick={() => this.props.xClick(this.props.task._id)}>X</button>\n      <button onClick={() => this.props.toggleClick(this.props.task._id)}>Toggle</button>\n\n      <span style={{\n        textDecoration: this.props.task.completed ? 'line-through' : 'none'\n      }}>{this.props.task.task}</span>\n\n    </li>\n        );\n  }\n\n}\nexport default Todo;","import * as React from \"react\";\nimport Todo from './Todo';\n\nclass TodoList extends React.Component {\n  render() {\n    return <div>\n      <ul>\n        {this.props.todos.map((item, index) => <Todo key={item._id} toggleClick={this.props.todoToggleClick} xClick={this.props.todoXClick} task={item}/>)}\n      </ul>\n    </div>\n\n  }\n}\n\nexport default TodoList","import * as React from \"react\";\n\nclass InputLine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {typedText: \"\"};\n    this.handleKey = this.handleKey.bind(this);\n  }\n  handleTyping(event) {\n    this.setState({typedText: event.target.value})\n  }\n  handleSubmit() {\n    this.props.onSubmit(this.state.typedText);\n    this.setState({typedText: \"\"});\n  }\n  handleKey(e) {\n    if (e.key === \"Enter\") {\n      this.handleSubmit();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <input type=\"text\" onKeyPress={this.handleKey} value={this.state.typedText} onChange={(e) => this.handleTyping(e)}/><button onClick={() => this.handleSubmit()}>Submit</button>\n      </div>\n    );\n  }\n}\n\n\nexport default InputLine;","import * as React from \"react\";\nimport TodoList from \"./TodoList\";\nimport InputLine from \"./InputLine\";\nimport axios from 'axios';\nimport $ from 'jquery'\nconst apiUrl = \"http://localhost:3001/todos\";\n\n// let dummyData = [{ taskText: \"Yeet skeet\", completed: true }, { taskText: \"Skeet yeet\", completed: false }, { taskText: \"Catch 'em all\", completed: false }];\n\nclass TodoApp extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {todos: []};\n    this.addTodo = this.addTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n    this.toggleTodo = this.toggleTodo.bind(this);\n  }\n\n  addTodo(task) {\n    const newTask = {taskText: task, completed: false};\n    axios.post(\"http://localhost:3001/todos/add\", newTask)\n      .then((response) => {\n        this.setState({ todos: this.state.todos.concat(response.data)});\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  removeTodo(id) {\n    axios.post(apiUrl + '/remove', {\"id\": id}).then((response) => {\n      this.setState((state) => {\n        for(let i = 0; i < state.todos.length; i++){\n          if ( state.todos[i]._id === id) {\n            state.todos.splice(i, 1);\n            i--;\n          }\n        }\n        return {todos: state.todos};\n      });\n    }).catch((e) => {\n      console.log(e);\n    });\n  }\n\n  toggleTodo(id) {\n    axios.post(apiUrl + '/toggle', {\"id\": id}).then(() => {\n      this.setState((state) => {\n        $.each(state.todos, function() {\n          if (this._id === id) {\n            this.completed = !this.completed;\n          }\n        });\n        return {todos: state.todos};\n      });\n    }).catch((e) => {\n      console.log(e);\n    });\n  }\n\n  componentDidMount() {\n    axios.get(apiUrl + '/all').then((response) => {\n      this.setState({todos: response.data});\n    }).catch((error) => {\n      console.log(error);\n    });\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <InputLine onKey={this.handleKey} onSubmit={this.addTodo}/>\n        <TodoList todoToggleClick={this.toggleTodo} todoXClick={this.removeTodo} todos={this.state.todos}/>\n      </div>\n    );\n  }\n}\n\nexport default TodoApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoApp from './TodoApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}